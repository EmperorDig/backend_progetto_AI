"""
Django settings for backend_project project.


Generated by 'django-admin startproject' using Django 5.1.5.


For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/


For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""


import os
from pathlib import Path
import environ
import logging
logger = logging.getLogger(__name__)


BASE_DIR = Path(__file__).resolve().parent.parent


# Inizializza environ
env = environ.Env()


# Determina quale file .env usare
DJANGO_ENV = os.environ.get('DJANGO_ENV', 'development')
print(f"DJANGO_ENV: {DJANGO_ENV}")  # Debug


if DJANGO_ENV == 'production':
    env_file = BASE_DIR / '.env.production'
else:
    env_file = BASE_DIR / '.env'


print(f"Using .env file: {env_file}")  # Debug


# Legge il file .env
environ.Env.read_env(env_file)


# Debug: verifica che SECRET_KEY sia stato caricato
print(f"SECRET_KEY from .env: {os.getenv('SECRET_KEY')}")






# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!


#SECRET_KEY = 'django-insecure-$9fl^n&_16joew3672*t)jchp5j@^7+f#^_#7$gqwjh5mfv=#$'


# SECURITY WARNING: don't run with debug turned on in production!


SECRET_KEY = env('SECRET_KEY')
DEBUG = env('DEBUG')


ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])




# Application definition


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'audio_management',
    'authentication',
]


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}


#SIMPLE_JWT = {
#   'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
#   'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
#   'ROTATE_REFRESH_TOKENS': True,  # Fa ruotare i token refresh
#   'BLACKLIST_AFTER_ROTATION': True,  # Rende inutilizzabili i vecchi token
#   'ALGORITHM': 'HS256',
#   'SIGNING_KEY': 'your-secret-key',  # Usa una chiave sicura!
#   'AUTH_HEADER_TYPES': ('Bearer',),
#}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'backend_project.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'backend_project.wsgi.application'




# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {
    'default': env.db('DATABASE_URL')
}
try:
    db_path = DATABASES['default']['NAME']
    print(f"DEBUG_DB_PATH: {db_path}")
    logger.info(f"DEBUG_DB_PATH: {db_path}")
except KeyError:
    print("DEBUG_DB_PATH: Database 'default' o 'NAME' non trovato in settings.")
    logger.error("DEBUG_DB_PATH: Database 'default' o 'NAME' non trovato in settings.")


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


AUTH_USER_MODEL = 'authentication.BaseUser'


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/


LANGUAGE_CODE = 'en-us'


TIME_ZONE = 'Europe/Rome'


DATE_FORMAT = "d/m/Y"  # Formato giorno/mese/anno (es. 25/12/2023)
DATETIME_FORMAT = "d/m/Y H:i"  # Es. 25/12/2023 14:30
TIME_FORMAT = "H:i:s"  # Es. 14:30:15


DATE_INPUT_FORMATS = [
    '%d/%m/%Y',
]


DATETIME_INPUT_FORMATS = [
    '%d/%m/%Y %H:%M:%S',
]


USE_I18N = True


USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


